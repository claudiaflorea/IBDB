package ibdb.utils;

import java.sql.Date;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.ApplicationListener;
import org.springframework.context.event.ContextRefreshedEvent;
import org.springframework.stereotype.Component;

import ibdb.entities.address.*;
import ibdb.entities.authors.*;
import ibdb.entities.books.*;
import ibdb.entities.categories.*;
import ibdb.entities.permissions.*;
import ibdb.entities.publishers.*;
import ibdb.entities.reviews.*;
import ibdb.entities.roles.*;
import ibdb.entities.subcategories.*;
import ibdb.entities.users.*;
import ibdb.entities.feedback.*;


@Component
public class DataLoader implements ApplicationListener<ContextRefreshedEvent> {


	@Autowired
	private ICategoryService categoryService;
	@Autowired
	private ISubcategoryService subcategoryService;
	@Autowired
	private IAddressService addressService;
	@Autowired
	private IUserAccountService userAccountService;
	@Autowired
	private IRoleService roleService;
	@Autowired
	private IPermissionService permissionService;
	@Autowired
	private IPublisherService publisherService;
	@Autowired
	private IAuthorService authorService;
	@Autowired
	private IBookService bookService;
	@Autowired
	private IReviewService reviewService;
	@Autowired
	private IFeedbackService feedbackService;
	@Autowired
	private DisplayData displayData;
	

	public void onApplicationEvent(ContextRefreshedEvent event) {
		loadData();
	}
	
	
	private void loadData() {
		displayData.printInfo("Starting data loading...");
		try {
			updateCategory();
			updateSubcategory();
			updateAddress();
			updateAuthor();
			updateRole();
			updatePermission();
			updateUserAccount();
			updateBook();
			updateFeedback();
			updateReview();
			updatePublisher();
		} catch(Exception e) {
			System.out.println(e);
		}

		displayData.printInfo("Data successfully loaded.");
	}
	
	
	private void updateCategory() {
		Category category1 = new Category(300, "Fiction");
		Category category2 = new Category(301, "Non-fiction");
		
		categoryService.insertCategory(category1);
		categoryService.insertCategory(category2);
	}
	
	private void updateSubcategory() {
		
	}
	
	private void updateAddress() {
		
	}
	
	private void updateAuthor() {
		
	}
	
	private void updatePublisher() {
		
	}
	
	private void updateRole() {
		
	}
	
	private void updatePermission() {
		
	}
	
	private void updateUserAccount() {
		
	}
	
	private void updateBook() {
		
	}
	
	private void updateReview() {
		
	}
	
	private void updateFeedback() {
		
	}

	
}
