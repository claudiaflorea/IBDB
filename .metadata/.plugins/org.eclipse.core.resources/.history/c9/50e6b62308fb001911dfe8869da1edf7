package ibdb.utils;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.ApplicationListener;
import org.springframework.context.event.ContextRefreshedEvent;
import org.springframework.stereotype.Component;

import ibdb.entities.address.Address;
import ibdb.entities.address.IAddressService;
import ibdb.entities.authors.Author;
import ibdb.entities.authors.IAuthorService;
import ibdb.entities.books.IBookService;
import ibdb.entities.categories.Category;
import ibdb.entities.categories.ICategoryService;
import ibdb.entities.feedback.IFeedbackService;
import ibdb.entities.permissions.IPermissionService;
import ibdb.entities.publishers.IPublisherService;
import ibdb.entities.reviews.IReviewService;
import ibdb.entities.roles.IRoleService;
import ibdb.entities.subcategories.ISubcategoryService;
import ibdb.entities.subcategories.Subcategory;
import ibdb.entities.users.IUserAccountService;

@Component
public class DataLoader implements ApplicationListener<ContextRefreshedEvent> {

	@Autowired
	private ICategoryService categoryService;
	@Autowired
	private ISubcategoryService subcategoryService;
	@Autowired
	private IAddressService addressService;
	@Autowired
	private IUserAccountService userAccountService;
	@Autowired
	private IRoleService roleService;
	@Autowired
	private IPermissionService permissionService;
	@Autowired
	private IPublisherService publisherService;
	@Autowired
	private IAuthorService authorService;
	@Autowired
	private IBookService bookService;
	@Autowired
	private IReviewService reviewService;
	@Autowired
	private IFeedbackService feedbackService;
	@Autowired
	private DisplayData displayData;
	
	public Date dateFormat(String date) {
		Date formattedDate;
		String pattern = "dd/MM/yyyy";
		SimpleDateFormat simpleDateFormat = new SimpleDateFormat(pattern);
		
		formattedDate = simpleDateFormat.parse(date);
		
		return simpleDateFormat.format(date);
	}

	public void onApplicationEvent(ContextRefreshedEvent event) {
		loadData();
	}

	private void loadData() {
		displayData.printInfo("Starting data loading...");
		try {
			updateCategory();
			updateSubcategory();
			updateAddress();
			updateAuthor();
			updateRole();
			updatePermission();
			updateUserAccount();
			updateBook();
			updateFeedback();
			updateReview();
			updatePublisher();
		} catch (Exception e) {
			System.out.println(e);
		}

		displayData.printInfo("Data successfully loaded.");
	}

	private void updateCategory() {
		Category category1 = new Category(300, "Fiction");
		Category category2 = new Category(301, "Non-fiction");

		categoryService.insertCategory(category1);
		categoryService.insertCategory(category2);
	}

	private void updateSubcategory() {
		
		List<Category> categories = categoryService.findAllCategories();
		
		Subcategory subcategory1 = new Subcategory(990, "Action and Adventure");
		subcategory1.setCategory(categories.get(0));
		Subcategory subcategory2 = new Subcategory(991, "Anthology");
		subcategory1.setCategory(categories.get(0));
		Subcategory subcategory3 = new Subcategory(992, "Classic");
		subcategory1.setCategory(categories.get(0));
		Subcategory subcategory4 = new Subcategory(993, "Comic/Graphic Novel");
		subcategory1.setCategory(categories.get(0));
		Subcategory subcategory5 = new Subcategory(994, "Crime and Detective");
		subcategory1.setCategory(categories.get(0));
		Subcategory subcategory6 = new Subcategory(995, "Drama");
		subcategory1.setCategory(categories.get(0));
		Subcategory subcategory7 = new Subcategory(996, "Fable");
		subcategory1.setCategory(categories.get(0));
		Subcategory subcategory8 = new Subcategory(997, "Fairy Tale");
		subcategory1.setCategory(categories.get(0));
		Subcategory subcategory9 = new Subcategory(998, "Fan-Fiction");
		subcategory1.setCategory(categories.get(0));
		Subcategory subcategory10 = new Subcategory(999, "Fantasy");
		subcategory1.setCategory(categories.get(0));
		Subcategory subcategory11 = new Subcategory(1000, "Historical Fiction");
		subcategory1.setCategory(categories.get(0));
		Subcategory subcategory12 = new Subcategory(1001, "Horror");
		subcategory1.setCategory(categories.get(0));
		Subcategory subcategory13 = new Subcategory(1002, "Humor");
		subcategory1.setCategory(categories.get(0));
		Subcategory subcategory14 = new Subcategory(1003, "Legend");
		subcategory1.setCategory(categories.get(0));
		Subcategory subcategory15 = new Subcategory(1004, "Magical Realism");
		subcategory1.setCategory(categories.get(0));
		Subcategory subcategory16 = new Subcategory(1005, "Mystery");
		subcategory1.setCategory(categories.get(0));
		Subcategory subcategory17 = new Subcategory(1006, "Mythology");
		subcategory1.setCategory(categories.get(0));
		Subcategory subcategory18 = new Subcategory(1007, "Historical Fiction");
		subcategory1.setCategory(categories.get(0));
		Subcategory subcategory19 = new Subcategory(1008, "Realistic Fiction");
		subcategory1.setCategory(categories.get(0));
		Subcategory subcategory20 = new Subcategory(1009, "Romance");
		subcategory1.setCategory(categories.get(0));
		Subcategory subcategory21 = new Subcategory(1010, "Satire");
		subcategory1.setCategory(categories.get(0));
		Subcategory subcategory22 = new Subcategory(1011, "Science Fiction");
		subcategory1.setCategory(categories.get(0));
		Subcategory subcategory23 = new Subcategory(1012, "Short Story");
		subcategory1.setCategory(categories.get(0));
		Subcategory subcategory24 = new Subcategory(1013, "Suspense/Thriller");
		subcategory1.setCategory(categories.get(0));

		Subcategory subcategory25 = new Subcategory(1014, "Biography");
		subcategory1.setCategory(categories.get(1));
		Subcategory subcategory26 = new Subcategory(1015, "Essay");
		subcategory1.setCategory(categories.get(1));
		Subcategory subcategory27 = new Subcategory(1016, "Memoir");
		subcategory1.setCategory(categories.get(1));
		Subcategory subcategory28 = new Subcategory(1017, "Narrative Nonfiction");
		subcategory1.setCategory(categories.get(1));
		Subcategory subcategory29 = new Subcategory(1018, "Periodicals");
		subcategory1.setCategory(categories.get(1));
		Subcategory subcategory30 = new Subcategory(1019, "Reference Books");
		subcategory1.setCategory(categories.get(1));
		Subcategory subcategory31 = new Subcategory(1020, "Self-help Book");
		subcategory1.setCategory(categories.get(1));
		Subcategory subcategory32 = new Subcategory(1021, "Speech");
		subcategory1.setCategory(categories.get(1));
		Subcategory subcategory33 = new Subcategory(1022, "Textbook");
		subcategory1.setCategory(categories.get(1));
		Subcategory subcategory34 = new Subcategory(1023, "Poetry");
		subcategory1.setCategory(categories.get(1));

		subcategoryService.insertSubcategory(subcategory1);
		subcategoryService.insertSubcategory(subcategory2);
		subcategoryService.insertSubcategory(subcategory3);
		subcategoryService.insertSubcategory(subcategory4);
		subcategoryService.insertSubcategory(subcategory5);
		subcategoryService.insertSubcategory(subcategory6);
		subcategoryService.insertSubcategory(subcategory7);
		subcategoryService.insertSubcategory(subcategory8);
		subcategoryService.insertSubcategory(subcategory9);
		subcategoryService.insertSubcategory(subcategory10);
		subcategoryService.insertSubcategory(subcategory11);
		subcategoryService.insertSubcategory(subcategory12);
		subcategoryService.insertSubcategory(subcategory13);
		subcategoryService.insertSubcategory(subcategory14);
		subcategoryService.insertSubcategory(subcategory15);
		subcategoryService.insertSubcategory(subcategory16);
		subcategoryService.insertSubcategory(subcategory17);
		subcategoryService.insertSubcategory(subcategory18);
		subcategoryService.insertSubcategory(subcategory19);
		subcategoryService.insertSubcategory(subcategory20);
		subcategoryService.insertSubcategory(subcategory21);
		subcategoryService.insertSubcategory(subcategory22);
		subcategoryService.insertSubcategory(subcategory23);
		subcategoryService.insertSubcategory(subcategory24);
		subcategoryService.insertSubcategory(subcategory25);
		subcategoryService.insertSubcategory(subcategory26);
		subcategoryService.insertSubcategory(subcategory27);
		subcategoryService.insertSubcategory(subcategory28);
		subcategoryService.insertSubcategory(subcategory29);
		subcategoryService.insertSubcategory(subcategory30);
		subcategoryService.insertSubcategory(subcategory31);
		subcategoryService.insertSubcategory(subcategory32);
		subcategoryService.insertSubcategory(subcategory33);
		subcategoryService.insertSubcategory(subcategory34);

	}

	private void updateAddress() {
		
		Address address1 = new Address(1000, null, null, null, "Manchester", "United Kingdom");
		Address address2 = new Address(1001, null, null, null, "Portland", "U.S.A");
		Address address3 = new Address(1002, null, null, null, "Beaconsfield", "United Kingdom");
		Address address4 = new Address(1003, null, null, null, "Stratford-upon-Avon", "United Kingdom");
		Address address5 = new Address(1004, null, null, null, "Bloemfontein", "South Africa");
		Address address6 = new Address(1005, null, null, null, "London", "United Kingdom");
		Address address7 = new Address(1006, null, null, null, "Porchester", "United Kingdom");
		Address address8 = new Address(1007, null, null, null, "Manryland", "U.S.A");
		Address address9 = new Address(1008, null, null, null, "Jonoesboro", "U.S.A");
		Address address10 = new Address(1009, null, null, null, "Hartford", "U.S.A");
		Address address11 = new Address(1010, null, null, null, "South River", "U.S.A");
		Address address12 = new Address(1011, null, null, null, "Tourquay", "United Kingdom");
		Address address13 = new Address(1012, null, null, null, "Palm Beach", "U.S.A");
		Address address14 = new Address(1013, null, null, null, "Winchester", "United Kingdom");
		Address address15 = new Address(1014, null, null, null, "Portsmouth", "United Kingdom");
		Address address16 = new Address(1015, null, null, null, "Petrovici", "Russia");
		Address address17 = new Address(1016, null, null, null, "Motihari", "India");
		Address address18 = new Address(1017, "Bedford Square", 50, null, "London", "United Kingdom");
		Address address19 = new Address(1018, "Alexander Ln", 83, null, "Crows Nest", "Australia");
		Address address20 = new Address(1019, "Strand", 80, null, "London", "United Kingdom");
		Address address21 = new Address(1020, null, null, null, "Brasov", "Romania");
		Address address22 = new Address(1021, null, null, null, "Iasi", "Romania");
		Address address23 = new Address(1022, null, null, null, "Bacau", "Romania");
		Address address24 = new Address(1023, null, null, null, "Chisinau", "Moldova");
		
		addressService.insertAddress(address1);
		addressService.insertAddress(address2);
		addressService.insertAddress(address3);
		addressService.insertAddress(address4);
		addressService.insertAddress(address5);
		addressService.insertAddress(address6);
		addressService.insertAddress(address7);
		addressService.insertAddress(address8);
		addressService.insertAddress(address9);
		addressService.insertAddress(address10);
		addressService.insertAddress(address11);
		addressService.insertAddress(address12);
		addressService.insertAddress(address13);
		addressService.insertAddress(address14);
		addressService.insertAddress(address15);
		addressService.insertAddress(address16);
		addressService.insertAddress(address17);
		addressService.insertAddress(address18);
		addressService.insertAddress(address19);
		addressService.insertAddress(address20);
		addressService.insertAddress(address21);
		addressService.insertAddress(address22);
		addressService.insertAddress(address23);
		addressService.insertAddress(address24);
		
	}

	private void updateAuthor() {
		
		List<Address> addresses = addressService.findAllAddresses();
		
		Author author1 = new Author(1, "Rowling", "Joanne", dateFormat("14/07/1965"));
		author1.setAddress(addresses.get(0));
		
	}

	private void updatePublisher() {

	}

	private void updateRole() {

	}

	private void updatePermission() {

	}

	private void updateUserAccount() {

	}

	private void updateBook() {

	}

	private void updateReview() {

	}

	private void updateFeedback() {

	}

}
